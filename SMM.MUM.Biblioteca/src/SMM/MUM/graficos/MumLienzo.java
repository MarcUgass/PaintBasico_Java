/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package SMM.MUM.graficos;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Usuario
 */
public class MumLienzo extends javax.swing.JPanel {

    /**
     * Creates new form MumLienzo
     */
    MumShape forma;
    public enum tipo { LINEA, RECTANGULO, ELIPSE};
    private Color color = Color.black;
    private boolean relleno=false;
    private Point punto;
    public tipo formaSeleccionada = tipo.LINEA;
    
    List<MumShape> vShape = new ArrayList();
    boolean mover = false;
    
    boolean transparencia = false;
    Stroke trazo = new BasicStroke();
   
    BufferedImage image = null;

    public BufferedImage getImage() {
        return image;
    }

    public void setImage(BufferedImage image) {
        this.image = image;
        if(image!=null) {
            setPreferredSize(new Dimension(image.getWidth(),image.getHeight()));
        } 
    }
    
    public void setColor(Color color) {
        this.color = color;
    }

    public Color getColor() {
        return color;
    }
    
    public void setForma(tipo forma) {
    this.formaSeleccionada = forma;
    }
    
    public void setRelleno(boolean relleno) {
        this.relleno = relleno;
    }

    public boolean getRelleno() {
        return relleno;
    }
    
    public void setMover(boolean m) {
        this.mover = m;
    }

    public boolean getMover() {
        return mover;
    }
    
    public void setTransparencia(boolean t) {
        this.transparencia = t;
    }

    public boolean getTransparencia() {
        return transparencia;
    }
    public MumLienzo() {
        initComponents();
    }

        @Override
    public void paint(Graphics g){
    super.paint(g);
    Graphics2D g2d = (Graphics2D)g;
    if (image != null){
        g2d.drawImage(image,0,0, this);
    }
    
    /*
    g2d.setPaint(color); //no hace falta, todo en shape
    if (transparencia) { // todo en shape
            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f));
        } else {
            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f)); //normal
        }
    */
    for (MumShape s:vShape){
        s.draw(g2d); //s.draw(g2d), nuevo formato, pq tu le pasas el g2d y cada clase tiene su propio draw 
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if(mover == false){
        punto = evt.getPoint();
        switch(formaSeleccionada) {
            case LINEA -> forma = new MumLinea();
            case RECTANGULO -> forma = new MumRectangulo();
            case ELIPSE -> forma = new MumElipse();
        }
        vShape.add(forma);
        }
        else {
            forma = this.figuraSeleccionada(evt.getPoint());
        }
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (mover == false){
            forma.crearShape(punto, evt.getPoint()); //la defincion es la misma para todo el MummSjhape
        } 
        else if (forma!=null){
            forma.setLocation(evt.getPoint());
        }
        
        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    private MumShape figuraSeleccionada(Point2D p){
    for(MumShape s:vShape){
        if(s.contains(p)){
            return s;
        }
    }
    return null;
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
